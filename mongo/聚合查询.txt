$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
$limit：用来限制MongoDB聚合管道返回的文档数。
$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
$group：将集合中的文档分组，可用于统计结果。
$sort：将输入文档排序后输出。
$geoNear：输出接近某一地理位置的有序文档。
 
 
//https://blog.csdn.net/qq_18948359/article/details/88777066
 
 ============================================================================================================================================================================================================
//文档的结构
 db.article.aggregate(
    { $project : {
        title : 1 ,
        author : 1 ,
    }}
 );
 
这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:
db.article.aggregate(
    { $project : {
        _id : 0 ,
        title : 1 ,
        author : 1
    }});
	
 ============================================================================================================================================================================================================
 //$match 查询条件
 db.articles.aggregate( [
                        { $match : { score : { $gt : 70, $lte : 90 } } },
                        { $group: { _id: null, count: { $sum: 1 } } }
                       ] );
 ============================================================================================================================================================================================================
//$group 分组统计
{ $group: { _id: <expression>, <field1>: { <accumulator1> : <expression1> }, ... } }
参数说明：

_id ：强制必须存在。可以为 null。 其余的计算字段是可选的，并使用<accumulator>运算符计算


//按照 item 字段进行分组，统计每个 item 下面的文档个数
db.sales.aggregate([
    {
        $group : {
            _id : "$item",  
            count: { $sum : 1}
        }
    }
]);



//统计用到的体育id
db.icons_comp_export.aggregate([
     {$project:{"SportIdCust":1} }
     ,
     {$group:{"_id":"$SportIdCust" } }
])



============================================================================================================================================================================================================



 {
	"_id" : ObjectId("6051eb8f171b000036005d9a"),
	"ApiName" : "activitylogstatistics",
	"Data" : {
		"PlayerId" : 6906700,
		"Auid" : 416,
		"GameId" : 34,
		"Performance" : 61000,
		"Recharge" : 0,
		"Reward" : 0,
		"Draw" : 0,
		"LogId" : "6051eb8f171b000036005d9a"
	},
	"CreateTime" : ISODate("2021-03-17T19:44:15.000+08:00"),
	"NumberTime" : 1615981455,
	"Process" : true
},


db.getCollection("001").aggregate([
    {$project:{"Data.Auid":1,per:"$Data.Performance"}  } 
    , {$group:{_id:"$Data.Auid",tper:{$sum:"$per"} } }  //_id 必须要有指定一个对应的 key. 不能直接对子级节点(Data.Performance)求和,所以在前面要做一个 $project视图，把子节点引用出来
 
])
 

//$project 新建表视图
//$group 归类合并


//以 TeamCust 归类合并,并统计重复的数量
db.Team_XJTY.aggregate([
     {$project:{"TeamName":1 } },
     {$group:{_id:"$TeamName", count: { $sum: 1 } }  }
 
])


============================================================================================================================================================================================================


============================================================================================================================================================================================================



============================================================================================================================================================================================================



============================================================================================================================================================================================================


============================================================================================================================================================================================================


============================================================================================================================================================================================================


============================================================================================================================================================================================================


============================================================================================================================================================================================================